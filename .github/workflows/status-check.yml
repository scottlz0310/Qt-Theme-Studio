name: Status Check

on:
  workflow_run:
    workflows: ["Continuous Integration", "Theme Quality Check"]
    types:
      - completed
  schedule:
    # 毎日午前9時（JST）に実行
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  status-summary:
    name: Repository Status Summary
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install git+https://github.com/scottlz0310/Qt-Theme-Manager.git
        pip install -e .[dev]

    - name: Run comprehensive status check
      run: |
        echo "🔍 Qt-Theme-Studio リポジトリ状況チェック"
        echo "========================================"
        echo ""

        # 基本情報
        echo "📊 基本情報:"
        echo "- ブランチ: ${{ github.ref_name }}"
        echo "- コミット: ${{ github.sha }}"
        echo "- 実行者: ${{ github.actor }}"
        echo "- 実行日時: $(date)"
        echo ""

        # テストスイート実行
        echo "🧪 テストスイート実行:"
        if pytest tests/ --tb=short -q --maxfail=1; then
          echo "✅ 全テスト通過"
          test_status="PASS"
        else
          echo "❌ テスト失敗"
          test_status="FAIL"
        fi
        echo ""

        # コード品質チェック
        echo "🔍 コード品質チェック:"
        quality_issues=0

        if command -v black >/dev/null 2>&1; then
          if black --check qt_theme_studio/ tests/ >/dev/null 2>&1; then
            echo "✅ Black: フォーマットOK"
          else
            echo "⚠️ Black: フォーマット要修正"
            quality_issues=$((quality_issues + 1))
          fi
        else
          echo "⚠️ Black: 未インストール"
        fi

        if command -v flake8 >/dev/null 2>&1; then
          if flake8 qt_theme_studio/ tests/ --max-line-length=88 --extend-ignore=E203,W503 >/dev/null 2>&1; then
            echo "✅ flake8: リンティングOK"
          else
            echo "⚠️ flake8: リンティング警告"
            quality_issues=$((quality_issues + 1))
          fi
        else
          echo "⚠️ flake8: 未インストール"
        fi
        echo ""

        # 依存関係チェック
        echo "📦 依存関係チェック:"
        if pip check >/dev/null 2>&1; then
          echo "✅ 依存関係: 問題なし"
          deps_status="OK"
        else
          echo "⚠️ 依存関係: 競合あり"
          deps_status="CONFLICT"
        fi
        echo ""

        # セキュリティチェック
        echo "🔒 セキュリティチェック:"
        if command -v safety >/dev/null 2>&1; then
          if safety check >/dev/null 2>&1; then
            echo "✅ Safety: 脆弱性なし"
            security_status="OK"
          else
            echo "⚠️ Safety: 脆弱性検出"
            security_status="VULNERABLE"
          fi
        else
          echo "⚠️ Safety: 未インストール"
          security_status="UNKNOWN"
        fi
        echo ""

        # 総合判定
        echo "📋 総合判定:"
        if [[ "$test_status" == "PASS" && $quality_issues -eq 0 && "$deps_status" == "OK" ]]; then
          echo "🎉 リポジトリ状況: 良好"
          echo "✅ リリース準備完了"
          overall_status="READY"
        elif [[ "$test_status" == "PASS" ]]; then
          echo "⚠️ リポジトリ状況: 注意が必要"
          echo "🔧 軽微な問題があります"
          overall_status="NEEDS_ATTENTION"
        else
          echo "❌ リポジトリ状況: 問題あり"
          echo "🛑 修正が必要です"
          overall_status="NEEDS_FIX"
        fi
        echo ""

        # 環境変数に結果を保存
        echo "TEST_STATUS=$test_status" >> $GITHUB_ENV
        echo "QUALITY_ISSUES=$quality_issues" >> $GITHUB_ENV
        echo "DEPS_STATUS=$deps_status" >> $GITHUB_ENV
        echo "SECURITY_STATUS=$security_status" >> $GITHUB_ENV
        echo "OVERALL_STATUS=$overall_status" >> $GITHUB_ENV
      env:
        QT_QPA_PLATFORM: offscreen

    - name: Create status badge
      run: |
        # ステータスバッジ用のJSONを生成
        case "$OVERALL_STATUS" in
          "READY")
            color="brightgreen"
            message="Ready for Release"
            ;;
          "NEEDS_ATTENTION")
            color="yellow"
            message="Needs Attention"
            ;;
          "NEEDS_FIX")
            color="red"
            message="Needs Fix"
            ;;
          *)
            color="lightgrey"
            message="Unknown"
            ;;
        esac

        # バッジ情報をファイルに保存
        cat > status-badge.json << EOF
        {
          "schemaVersion": 1,
          "label": "Repository Status",
          "message": "$message",
          "color": "$color"
        }
        EOF

        echo "📛 ステータスバッジ: $message ($color)"

    - name: Generate detailed report
      run: |
        # 詳細レポートを生成
        cat > status-report.md << EOF
        # Qt-Theme-Studio Repository Status Report

        **Generated:** $(date)
        **Branch:** ${{ github.ref_name }}
        **Commit:** ${{ github.sha }}

        ## Summary

        | Category | Status | Details |
        |----------|--------|---------|
        | Tests | $TEST_STATUS | All tests execution status |
        | Code Quality | $([[ $QUALITY_ISSUES -eq 0 ]] && echo "✅ PASS" || echo "⚠️ $QUALITY_ISSUES issues") | Code formatting and linting |
        | Dependencies | $DEPS_STATUS | Package dependency conflicts |
        | Security | $SECURITY_STATUS | Vulnerability scan results |
        | **Overall** | **$OVERALL_STATUS** | **Repository readiness** |

        ## Test Results

        - **Status:** $TEST_STATUS
        - **Details:** $(if [[ "$TEST_STATUS" == "PASS" ]]; then echo "All tests are passing successfully"; else echo "Some tests are failing - check logs for details"; fi)

        ## Code Quality

        - **Issues Found:** $QUALITY_ISSUES
        - **Recommendation:** $(if [[ $QUALITY_ISSUES -eq 0 ]]; then echo "Code quality is excellent"; else echo "Run 'black qt_theme_studio/ tests/' and 'flake8 qt_theme_studio/ tests/' to fix issues"; fi)

        ## Next Steps

        $(case "$OVERALL_STATUS" in
          "READY")
            echo "🎉 **Repository is ready for release!**"
            echo ""
            echo "- All tests are passing"
            echo "- Code quality is good"
            echo "- No critical issues detected"
            echo ""
            echo "You can proceed with creating a release."
            ;;
          "NEEDS_ATTENTION")
            echo "⚠️ **Repository needs minor attention**"
            echo ""
            echo "- Tests are passing"
            echo "- Minor code quality issues detected"
            echo "- Consider fixing before release"
            ;;
          "NEEDS_FIX")
            echo "🛑 **Repository needs fixes before release**"
            echo ""
            echo "- Critical issues detected"
            echo "- Fix failing tests"
            echo "- Address code quality issues"
            echo "- Re-run checks after fixes"
            ;;
        esac)

        ---
        *This report was generated automatically by GitHub Actions*
        EOF

        echo "📄 詳細レポートを生成しました"

    - name: Upload status artifacts
      uses: actions/upload-artifact@v4
      with:
        name: repository-status
        path: |
          status-badge.json
          status-report.md
        retention-days: 30

    - name: Comment on latest PR (if exists)
      if: github.event_name == 'workflow_run'
      uses: actions/github-script@v7
      with:
        script: |
          // 最新のPRを検索
          const prs = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            sort: 'updated',
            direction: 'desc',
            per_page: 1
          });

          if (prs.data.length > 0) {
            const pr = prs.data[0];
            const status = process.env.OVERALL_STATUS;
            const testStatus = process.env.TEST_STATUS;
            const qualityIssues = process.env.QUALITY_ISSUES;

            let statusEmoji, statusMessage;
            switch(status) {
              case 'READY':
                statusEmoji = '🎉';
                statusMessage = 'リポジトリは良好な状態です！';
                break;
              case 'NEEDS_ATTENTION':
                statusEmoji = '⚠️';
                statusMessage = '軽微な問題があります';
                break;
              case 'NEEDS_FIX':
                statusEmoji = '🛑';
                statusMessage = '修正が必要な問題があります';
                break;
              default:
                statusEmoji = '❓';
                statusMessage = '状況不明';
            }

            const comment = `## ${statusEmoji} リポジトリ状況レポート

            **総合状況:** ${statusMessage}

            ### 📊 チェック結果
            - **テスト:** ${testStatus === 'PASS' ? '✅ 通過' : '❌ 失敗'}
            - **コード品質:** ${qualityIssues === '0' ? '✅ 良好' : `⚠️ ${qualityIssues}個の問題`}

            ### 📄 詳細
            詳細なレポートは [Actions](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) の Artifacts をご確認ください。

            ---
            *自動生成レポート - ${new Date().toLocaleString('ja-JP')}*`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: comment
            });
          }

    - name: Set workflow status
      run: |
        case "$OVERALL_STATUS" in
          "READY")
            echo "✅ ワークフロー完了: リポジトリは良好な状態です"
            exit 0
            ;;
          "NEEDS_ATTENTION")
            echo "⚠️ ワークフロー完了: 軽微な問題があります"
            exit 0
            ;;
          "NEEDS_FIX")
            echo "❌ ワークフロー完了: 修正が必要です"
            exit 1
            ;;
          *)
            echo "❓ ワークフロー完了: 状況不明"
            exit 1
            ;;
        esac

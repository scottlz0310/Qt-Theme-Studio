name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install git+https://github.com/scottlz0310/Qt-Theme-Manager.git
        pip install -e .[dev]
    
    - name: Run tests
      run: |
        pytest tests/ -v --tb=short
      env:
        QT_QPA_PLATFORM: offscreen

  build:
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install git+https://github.com/scottlz0310/Qt-Theme-Manager.git
        pip install -e .[dev]
        pip install build pyinstaller
    
    - name: Build package
      run: |
        python -m build
    
    - name: Build executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        pyinstaller --onefile --windowed --name qt-theme-studio launch_theme_studio.py
        mkdir dist-exe
        copy dist\qt-theme-studio.exe dist-exe\
        copy README.md dist-exe\
        copy INSTALL.md dist-exe\
        copy RELEASE_NOTES.md dist-exe\
    
    - name: Build executable (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        pyinstaller --onefile --windowed --name qt-theme-studio launch_theme_studio.py
        mkdir dist-exe
        cp dist/qt-theme-studio dist-exe/
        cp README.md dist-exe/
        cp INSTALL.md dist-exe/
        cp RELEASE_NOTES.md dist-exe/
    
    - name: Build executable (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        pyinstaller --onefile --name qt-theme-studio launch_theme_studio.py
        mkdir dist-exe
        cp dist/qt-theme-studio dist-exe/
        cp README.md dist-exe/
        cp INSTALL.md dist-exe/
        cp RELEASE_NOTES.md dist-exe/
    
    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd dist-exe
        7z a ../qt-theme-studio-windows.zip *
    
    - name: Create archive (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cd dist-exe
        tar -czf ../qt-theme-studio-macos.tar.gz *
    
    - name: Create archive (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd dist-exe
        tar -czf ../qt-theme-studio-linux.tar.gz *
    
    - name: Upload wheel artifact
      uses: actions/upload-artifact@v4
      with:
        name: wheel-${{ matrix.os }}
        path: dist/*.whl
    
    - name: Upload executable artifact (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: executable-windows
        path: qt-theme-studio-windows.zip
    
    - name: Upload executable artifact (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: executable-macos
        path: qt-theme-studio-macos.tar.gz
    
    - name: Upload executable artifact (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: executable-linux
        path: qt-theme-studio-linux.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Get tag name
      id: tag
      run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: Qt-Theme-Studio ${{ steps.tag.outputs.tag }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false
        files: |
          executable-windows/qt-theme-studio-windows.zip
          executable-macos/qt-theme-studio-macos.tar.gz
          executable-linux/qt-theme-studio-linux.tar.gz
          wheel-ubuntu-latest/qt_theme_studio-1.0.0-py3-none-any.whl


  publish-pypi:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
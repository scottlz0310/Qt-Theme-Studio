name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  # 仮想ディスプレイ環境設定
  DISPLAY: ":99"
  QT_QPA_PLATFORM: "offscreen"
  QT_THEME_STUDIO_TESTING: "true"
  QT_THEME_STUDIO_LOG_LEVEL: "DEBUG"

jobs:
  test:
    name: Test Suite (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Setup virtual display for GUI tests
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb x11-utils libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0
        # 仮想ディスプレイを起動
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get install -y libegl1-mesa libgl1-mesa-glx libglib2.0-0 libxrandr2 libxss1 libxcursor1 libxcomposite1 libasound2 libxi6 libxtst6

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install git+https://github.com/scottlz0310/Qt-Theme-Manager.git
        pip install -e .[dev]

    - name: Verify Qt installation
      run: |
        python -c "
        try:
            import PySide6.QtCore
            print('✅ PySide6 successfully imported')
        except ImportError as e:
            print(f'❌ PySide6 import failed: {e}')
            try:
                import PyQt6.QtCore
                print('✅ PyQt6 successfully imported')
            except ImportError as e2:
                print(f'❌ PyQt6 import failed: {e2}')
                try:
                    import PyQt5.QtCore
                    print('✅ PyQt5 successfully imported')
                except ImportError as e3:
                    print(f'❌ All Qt frameworks failed: {e3}')
                    exit(1)
        "

    - name: Run comprehensive test suite with coverage
      run: |
        echo "🧪 包括的テストスイートを実行中..."
        python scripts/coverage_manager.py \
          --source-dir qt_theme_studio \
          --min-coverage 80 \
          --test-paths tests/unit tests/integration \
          --ci-mode
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Run GUI tests with virtual display
      run: |
        echo "🖥️  GUIテストを実行中..."
        pytest tests/ -m "gui" -v --tb=short --maxfail=3 \
          --cov=qt_theme_studio --cov-append --cov-report=term-missing --cov-report=xml \
          --cov-report=json:coverage_gui.json
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Generate comprehensive coverage report
      if: matrix.python-version == '3.11'
      run: |
        echo "📊 包括的カバレッジレポートを生成中..."

        # 最終的なカバレッジレポートを生成
        coverage combine || true
        coverage report --show-missing --fail-under=80
        coverage html -d htmlcov
        coverage xml

        # カバレッジサマリーを生成
        python scripts/coverage_manager.py --ci-mode || true

    - name: Check coverage threshold and generate alerts
      if: matrix.python-version == '3.11'
      run: |
        echo "🔍 カバレッジ閾値チェックを実行中..."

        # カバレッジサマリーファイルから情報を取得
        if [ -f logs/coverage_summary.json ]; then
          COVERAGE=$(python -c "
        import json
        with open('logs/coverage_summary.json', 'r') as f:
            data = json.load(f)
            print(f\"{data['total_coverage']:.2f}\")
        ")
          THRESHOLD_MET=$(python -c "
        import json
        with open('logs/coverage_summary.json', 'r') as f:
            data = json.load(f)
            print('true' if data['threshold_met'] else 'false')
        ")

          echo "現在のカバレッジ: ${COVERAGE}%"

          if [ "$THRESHOLD_MET" = "true" ]; then
            echo "✅ テストカバレッジが閾値を満たしています: ${COVERAGE}% >= 80%"
          else
            echo "⚠️  警告: テストカバレッジが80%を下回っています (${COVERAGE}%)"
            echo "::warning::テストカバレッジが閾値を下回っています: ${COVERAGE}% < 80%"

            # 低カバレッジファイルの詳細を表示
            python -c "
        import json
        with open('logs/coverage_summary.json', 'r') as f:
            data = json.load(f)
            low_files = data.get('low_coverage_files', [])
            if low_files:
                print('低カバレッジファイル:')
                for file_info in low_files[:10]:  # 最大10件表示
                    print(f\"  {file_info['file']}: {file_info['coverage']:.2f}%\")
        "
          fi
        else
          echo "⚠️  カバレッジサマリーファイルが見つかりません"
        fi

    - name: Upload coverage reports
      if: matrix.python-version == '3.11'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-${{ matrix.python-version }}
        path: |
          coverage.xml
          coverage.json
          htmlcov/
          logs/coverage_summary.json
          logs/coverage_badge.json
        retention-days: 30

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  quality:
    name: Code Quality Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run Ruff linting
      run: |
        echo "🔍 Ruffリンティングを実行中..."
        ruff check qt_theme_studio/ tests/ --output-format=github

    - name: Run Ruff formatting check
      run: |
        echo "🎨 Ruffフォーマットチェックを実行中..."
        ruff format --check qt_theme_studio/ tests/

    - name: Run mypy type checking
      run: |
        echo "🔍 型チェックを実行中..."
        mypy qt_theme_studio/ --config-file=pyproject.toml

    - name: Check for print statements
      run: |
        echo "🔍 print文チェックを実行中..."
        python scripts/check_print_statements.py

    - name: Run integrated quality check
      run: |
        echo "🔍 統合品質チェックを実行中..."
        python scripts/quality_check.py --ci-mode

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run Bandit security scan
      run: |
        echo "🔒 Banditセキュリティスキャンを実行中..."
        bandit -r qt_theme_studio/ -f json -o logs/bandit-report.json || true
        bandit -r qt_theme_studio/ -f txt || true

    - name: Run Safety dependency check
      run: |
        echo "🔒 依存関係脆弱性チェックを実行中..."
        safety check --json --output logs/safety-report.json || true
        safety check || true

    - name: Generate security summary
      run: |
        echo "📊 セキュリティレポート概要を生成中..."
        if [ -f logs/bandit-report.json ]; then
          echo "Banditレポートが生成されました"
          python -c "
        import json
        try:
            with open('logs/bandit-report.json', 'r') as f:
                data = json.load(f)
                issues = data.get('results', [])
                print(f'Bandit: {len(issues)}件の問題を検出')
        except:
            print('Banditレポートの解析に失敗')
        "
        fi

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          logs/bandit-report.json
          logs/safety-report.json
        retention-days: 30

  integration:
    name: Integration Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install git+https://github.com/scottlz0310/Qt-Theme-Manager.git
        pip install -e .[dev]

    - name: Test CLI functionality
      run: |
        # CLIコマンドの基本動作テスト
        python -m qt_theme_studio --version
        python -m qt_theme_studio --help
      env:
        QT_QPA_PLATFORM: offscreen

    - name: Test package installation
      run: |
        # パッケージが正常にインストールされているかテスト
        python -c "import qt_theme_studio; print('✅ Package import successful')"
        python -c "from qt_theme_studio.adapters.qt_adapter import QtAdapter; print('✅ Qt adapter import successful')"
        python -c "from qt_theme_studio.adapters.theme_adapter import ThemeAdapter; print('✅ Theme adapter import successful')"

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install git+https://github.com/scottlz0310/Qt-Theme-Manager.git
        pip install -e .[dev]
        pip install pytest-benchmark

    - name: Run performance benchmarks
      run: |
        # パフォーマンステストを実行（ベンチマーク付き）
        pytest tests/ -k "performance or benchmark" --benchmark-only --benchmark-json=benchmark.json || echo "No performance tests found"
      env:
        QT_QPA_PLATFORM: offscreen

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: benchmark-results
        path: benchmark.json
        retention-days: 30

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install git+https://github.com/scottlz0310/Qt-Theme-Manager.git
        pip install -e .[dev]

    - name: Build package
      run: |
        python -m build
        twine check dist/*

    - name: Test installation from wheel
      run: |
        pip install dist/*.whl
        python -c "import qt_theme_studio; print('✅ Wheel installation successful')"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        retention-days: 30

  status-check:
    name: CI Status Summary
    runs-on: ubuntu-latest
    needs: [test, quality, security, integration, performance, build-test]
    if: always()

    steps:
    - name: Check all jobs status
      run: |
        echo "=== CI/CD ステータス概要 ==="
        echo "テストスイート: ${{ needs.test.result }}"
        echo "コード品質: ${{ needs.quality.result }}"
        echo "セキュリティスキャン: ${{ needs.security.result }}"
        echo "統合テスト: ${{ needs.integration.result }}"
        echo "パフォーマンステスト: ${{ needs.performance.result }}"
        echo "ビルドテスト: ${{ needs.build-test.result }}"
        echo "=========================="

        # すべてのジョブが成功した場合のみ成功とする
        if [[ "${{ needs.test.result }}" == "success" && \
              "${{ needs.quality.result }}" == "success" && \
              "${{ needs.security.result }}" == "success" && \
              "${{ needs.integration.result }}" == "success" && \
              "${{ needs.build-test.result }}" == "success" ]]; then
          echo "✅ すべてのCIチェックが通過しました！リリース準備完了です。"
          exit 0
        else
          echo "❌ 一部のCIチェックが失敗しました。結果を確認してください。"
          exit 1
        fi

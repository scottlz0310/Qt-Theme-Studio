name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install git+https://github.com/scottlz0310/Qt-Theme-Manager.git
        pip install -e .[dev]

    - name: Run comprehensive test suite
      run: |
        # 全テストを実行（GUIなし、高速実行）
        pytest tests/ -v --tb=short --maxfail=5 --durations=10
      env:
        QT_QPA_PLATFORM: offscreen
        PYTHONPATH: ${{ github.workspace }}

    - name: Generate test coverage report
      if: matrix.python-version == '3.11'
      run: |
        pip install coverage
        coverage run -m pytest tests/
        coverage report --show-missing
        coverage xml

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        pip install -e .[dev]

    - name: Run Black (code formatting check)
      run: black --check --diff qt_theme_studio/ tests/

    - name: Run isort (import sorting check)
      run: isort --check-only --diff qt_theme_studio/ tests/

    - name: Run flake8 (linting)
      run: flake8 qt_theme_studio/ tests/ --max-line-length=88 --extend-ignore=E203,W503

    - name: Run mypy (type checking)
      run: mypy qt_theme_studio/ --ignore-missing-imports --no-strict-optional

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -e .[dev]

    - name: Run Bandit (security linting)
      run: bandit -r qt_theme_studio/ -f json -o bandit-report.json || true

    - name: Run Safety (dependency vulnerability check)
      run: safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  integration:
    name: Integration Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install git+https://github.com/scottlz0310/Qt-Theme-Manager.git
        pip install -e .[dev]

    - name: Test CLI functionality
      run: |
        # CLIコマンドの基本動作テスト
        python -m qt_theme_studio --version
        python -m qt_theme_studio --help
      env:
        QT_QPA_PLATFORM: offscreen

    - name: Test package installation
      run: |
        # パッケージが正常にインストールされているかテスト
        python -c "import qt_theme_studio; print('✅ Package import successful')"
        python -c "from qt_theme_studio.adapters.qt_adapter import QtAdapter; print('✅ Qt adapter import successful')"
        python -c "from qt_theme_studio.adapters.theme_adapter import ThemeAdapter; print('✅ Theme adapter import successful')"

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install git+https://github.com/scottlz0310/Qt-Theme-Manager.git
        pip install -e .[dev]
        pip install pytest-benchmark

    - name: Run performance benchmarks
      run: |
        # パフォーマンステストを実行（ベンチマーク付き）
        pytest tests/ -k "performance or benchmark" --benchmark-only --benchmark-json=benchmark.json || echo "No performance tests found"
      env:
        QT_QPA_PLATFORM: offscreen

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: benchmark-results
        path: benchmark.json
        retention-days: 30

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install git+https://github.com/scottlz0310/Qt-Theme-Manager.git
        pip install -e .[dev]

    - name: Build package
      run: |
        python -m build
        twine check dist/*

    - name: Test installation from wheel
      run: |
        pip install dist/*.whl
        python -c "import qt_theme_studio; print('✅ Wheel installation successful')"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        retention-days: 30

  status-check:
    name: Status Check
    runs-on: ubuntu-latest
    needs: [test, lint, security, integration, performance, build-test]
    if: always()

    steps:
    - name: Check all jobs status
      run: |
        echo "=== CI/CD Status Summary ==="
        echo "Test Suite: ${{ needs.test.result }}"
        echo "Code Quality: ${{ needs.lint.result }}"
        echo "Security Scan: ${{ needs.security.result }}"
        echo "Integration Tests: ${{ needs.integration.result }}"
        echo "Performance Tests: ${{ needs.performance.result }}"
        echo "Build Test: ${{ needs.build-test.result }}"
        echo "=========================="

        # すべてのジョブが成功した場合のみ成功とする
        if [[ "${{ needs.test.result }}" == "success" && \
              "${{ needs.lint.result }}" == "success" && \
              "${{ needs.security.result }}" == "success" && \
              "${{ needs.integration.result }}" == "success" && \
              "${{ needs.build-test.result }}" == "success" ]]; then
          echo "✅ All CI checks passed! Ready for release."
          exit 0
        else
          echo "❌ Some CI checks failed. Please review the results."
          exit 1
        fi

# 大前提：日本語で応答すること

## ソースコード変更の基本ルール

### 破壊的変更の禁止
- **既存のソースコードをシンプルな実装に差し替えることは禁止**
- **一時的に機能を取り外すことは禁止**
- **既存の実装を削除・置き換えることは禁止**

### 許可される変更
- **不整合を直す等の細かな修正は許可**
- **バグ修正や軽微な改善は許可**
- **新機能の追加は許可**
- **テスト環境の整備は許可**

### 変更の原則
- 既存のコードを活かす
- 段階的な改善を行う
- 後方互換性を保つ
- テスト可能な状態を維持する

## qt-theme-manager統合計画

### 目標
Qt-Theme-Studioをqt-theme-managerの標準機能を活用した統合システムに再構築する。

### 背景
- 現在の独自実装は仕様書の無視であり、業務委託契約なら違約金が発生するレベル
- Qt-Theme-StudioはQt-Theme-Managerの外部プレビューワーとテーマファイル作成機能のために作られたGUIアプリケーション
- 独自実装による重複と不整合を解消する必要がある
- テーマファイル形式はqt-theme-manager標準(json)に統一する
- 冗長なコードを圧縮する副次的な効果も期待する

### 統合戦略
1. **独自実装の削除**
   - 複雑なスタイルシート生成コード
   - 不整合なテーマ形式変換
   - 重複する機能

2. **qt-theme-managerの全面活用**
   - StylesheetGenerator: スタイルシート生成
   - ThemeController: テーマ制御
   - ThemeLoader: テーマ読み込み
   - apply_theme_to_widget: ウィジェットへのテーマ適用

3. **段階的統合**
   - 第1段階: スタイルシート生成の置き換え
   - 第2段階: テーマ適用処理の統合
   - 第3段階: テーマファイル形式の統一

### 実装原則
- テーマ管理機能における独自実装は禁止
- qt-theme-managerの標準機能を優先
- テーマファイル形式はqt-theme-manager標準に統一
- UI/UXは既存の実装を活かす
- 追加機能として、テーマ切り替え機能とテーマファイルに複数テーマを保存、挿入、削除を可能にする
- 検証用スクリプトはplayground/フォルダに配置する
- その他ルートに雑多なドキュメントやスクリプトを配置せず、適切なフォルダに(なければ作成して)配置する

### 品質基準
- 既存のテストケースが通ることを目指すが、場合によってはテストファイルの統廃合や修復も行う
- CI/CDワークフローが成功することを目指すが、場合によってはワークフローの見直しも行う
- パフォーマンスが向上することを目指す。パフォーマンスチェックを行い、パフォーマンスが向上するようにコードを修正する
- 保守性が向上することを目指す。保守性向上のためのコード整理も積極的に行う

## 技術統合と改善計画

### 1. アクセシビリティ機能の統合
Reference/theme_editor.py の ColorUtils クラスから以下の技術を統合：
- WCAG準拠のコントラスト比計算機能
- 自動テキスト色最適化機能
- 色覚異常者への配慮機能

統合先: qt_theme_studio/utilities/accessibility_manager.py
統合方法: ColorUtils クラスの静的メソッドを移植し、アクセシビリティ基準チェック機能を強化

### 2. 高度なカラー理論機能の強化
Reference/theme_editor.py から以下の技術を統合：
- 明度・彩度の精密調整機能
- ハーモニーカラーパレット自動生成
- HSL色空間での色調整

統合先: qt_theme_studio/utilities/color_analyzer.py, color_improver.py
統合方法: カラー理論に基づく自動調整機能を実装し、ユーザーの色選択を支援

### 3. UI/UX の向上
Reference/theme_editor.py から以下の技術を統合：
- コンポーネント別ハイライト・ナビゲーション機能
- リアルタイムプレビュー更新の最適化
- 段階的フォールバック機能

統合先: qt_theme_studio/views/main_window.py, preview.py
統合方法: ユーザビリティを向上させるナビゲーション機能とパフォーマンス最適化を実装

### 4. ゼブラパターン統合技術の活用
Reference/theme_editor_zebra_extension.py から以下の技術を統合：
- 既存テーマエディターへの機能拡張パターン
- ゼブラパターン自動生成の統合
- アクセシビリティ重視の色調整UI

統合先: qt_theme_studio/views/ の統合アーキテクチャ
統合方法: 拡張可能なプラグインアーキテクチャを採用し、機能の段階的統合を実現

### 5. 高度なテーマ管理機能
Reference/theme_editor.py から以下の技術を統合：
- 自動カラーパレット生成
- テーマの調和性チェック
- インテリジェントな色調整

統合先: qt_theme_studio/services/theme_service.py
統合方法: 機械学習的な色調整機能とテーマ品質向上機能を実装

### 6. エラーハンドリングと堅牢性の向上
Reference/launch_zebra_theme_editor.py から以下の技術を統合：
- 段階的なフォールバック機能
- 依存関係の自動検出と適応
- ユーザーフレンドリーなエラーメッセージ

統合先: qt_theme_studio/error_handler.py, adapters/
統合方法: システムの堅牢性を向上させ、ユーザー体験を改善

### 実装優先順位
1. 高優先度: アクセシビリティ機能、WCAG準拠機能
2. 中優先度: カラー理論機能、UI/UX向上
3. 低優先度: 高度なテーマ管理、ゼブラパターン統合

### 技術移行時の注意事項
- Reference/ のコードは既存のqt_theme_studio/ アーキテクチャに適合するよう調整
- 日本語UIとログメッセージの維持
- 既存のテストケースとの整合性確保
- パフォーマンスへの影響を最小限に抑制